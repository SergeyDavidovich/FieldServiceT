@page "/BKBSchedulePage"

@attribute [Authorize]

@using Syncfusion.Blazor.Schedule
@using Microsoft.IdentityModel.Clients.ActiveDirectory
@using FieldServiceT.Models
@using FieldServiceT.Repositories
@using FieldServiceT.Helpers
@using Microsoft.Extensions.Configuration


@inject BookableResourceBooking<BookedResource> bookableResourceBookingService
@inject IConfiguration configuration
@inject TokenService tokenService
@inject NavigationManager navigationManager

<h6 style="margin:6px;">Schedule</h6>

<div>
    <SfSchedule TValue="Appointment" Readonly="true" Height="650px" SelectedDate="@(new DateTime(2020, 2, 12))">
        <ScheduleEventSettings DataSource="@DataSourceList"></ScheduleEventSettings>
        <ScheduleEvents TValue="Appointment" OnEventClick="OnEventClickHandler"></ScheduleEvents>
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.WorkWeek"></ScheduleView>
            <ScheduleView MaxEventsPerRow="2" Option="View.Month"></ScheduleView>
            <ScheduleView Option="View.Agenda" IsSelected="true"></ScheduleView>
        </ScheduleViews>
    </SfSchedule>
</div>

@code {
    private AuthenticationResult token;
    private List<BookedResource> ResourceList { get; set; }
    private string CurrentToken { get; set; }
    private DateTime CurrentDate = DateTime.Now;

    View CurrentView = View.Agenda;

    [CascadingParameter]
    Task<AuthenticationState> authenticationState { get; set; }

    private List<Appointment> DataSourceList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DataSourceList = new List<Appointment>();

        string baseUrl = configuration["BaseUrl"];
        string token = (await tokenService.GetAuthenticationResultAsync()).AccessToken;
        string userMail = (await authenticationState).User.Identity.Name;

        bookableResourceBookingService.BaseURl = baseUrl;
        bookableResourceBookingService.AccessToken = token;
        bookableResourceBookingService.UserMail = userMail;

        var bookings = await bookableResourceBookingService.GetBookedResourceBokings();

        //bookings.Clear();

        DataSourceList = MappedToScreenObject(bookings);

        //if (bookings.Count != 0) DataSourceList = MappedToScreenObject(bookings);
    }

    public void OnEventClickHandler(EventClickArgs<Appointment> args)
    {
        var id = args.Event.Id;
        var url = "/BookedResourcePage/" + id;// + "/" + "SchedulePage/";
        navigationManager.NavigateTo(url);
    }

    //Id = i,
    //                Subject = item.Name,
    //                StartTime = item.StartTime,
    //                EndTime = item.EndTime,
    //                Location = item.WOAddress1

    private List<Appointment> MappedToScreenObject(List<BookedResource> resourceList)
    {
        var list = resourceList.Select(res => new Appointment()
        {
            Id = res.BookableResourceBookingId,
            Subject = res.Name,
            StartTime = res.StartTime,
            EndTime = res.EndTime,
            Location = res.WorkOrder == null ? "" : res.WorkOrder.Address1
        }
        );
        var resultList = list.ToList<Appointment>();
        return resultList;
    }

    public class Appointment
    {
        public string Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }

        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
    }
}
