@page "/BookingPage"
@*@attribute [Authorize]*@

@using Syncfusion.Blazor.Grids
@using FieldServiceT.Models
@using Microsoft.Extensions.Configuration
@using FieldServiceT.Helpers
@using Microsoft.AspNetCore.Authorization
@using FieldServiceT.Repositories

@inject NavigationManager navigationManager
@inject IConfiguration configuration
@inject BrowserService browserService
@inject TokenService tokenService
@inject BookableResourceBooking<BookedResource> bookableResourceBooking

<div style="width:100%; height:100vh; font-size:9px">
    <div style="cursor:pointer; width:100%; height:100%;">
        <p><em>Booking</em></p>
        <SfGrid DataSource="@DataSourceList" AllowFiltering="true" AllowSorting="true" AllowPaging="true" Height="100%" ShowColumnMenu="true" AllowTextWrap="false">
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
            <GridEvents RowSelected="RowSelectedHandler" TValue="BookedResourceScreen"></GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(BookedResourceScreen.BookableResourceBookingId) HeaderText="Id"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="0"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.Name) HeaderText="NAME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.StartTime) HeaderText="START TIME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Format="d" Width="70"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.EndTime) HeaderText="END TIME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Format="d" Width="70" HideAtMedia="(min-width: 481px)"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOName) HeaderText="WO NAME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="60" HideAtMedia="(min-width: 481px)"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOAddress1) HeaderText="ADDRESS1"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOAddressName) HeaderText="ADDRESS NAME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="80" HideAtMedia="(min-width: 481px)"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOSummary) HeaderText="SUMMARY"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="0" HideAtMedia="(min-width: 481px)"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.StatusName) HeaderText="STATUS"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="50"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@code
{
    #region Links
    // https://docs.microsoft.com/en-us/dynamics365/customer-engagement/web-api/bookableresourcebooking?view=dynamics-ce-odata-9
    // https://docs.microsoft.com/en-us/dynamics365/customer-engagement/web-api/bookableresourcebooking?view=dynamics-ce-odata-9#single-valued-navigation-properties
    // https://42clouds.com/ru-ru/techdocs/interfeys-odata-vozmozhnosti-i-nastroyka.html#link10
    #endregion

    #region Code

    private List<BookedResourceScreen> DataSourceList { get; set; }

    [CascadingParameter]
    Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DataSourceList = new List<BookedResourceScreen>();

        string baseUrl = configuration["BaseUrl"];
        string token = (await tokenService.GetAuthenticationResultAsync()).AccessToken;
        string userMail = (await authenticationState).User.Identity.Name;

        bookableResourceBooking.BaseURl = baseUrl;
        bookableResourceBooking.AccessToken = token;
        bookableResourceBooking.UserMail = userMail;

        var bookings = await bookableResourceBooking.GetBookedResourceBokings();

        DataSourceList = MappedToScreenObject(bookings);
    }

    private List<BookedResourceScreen> MappedToScreenObject(List<BookedResource> resourceList)
    {
        var list = resourceList.Select(res => new BookedResourceScreen()
        {
            BookableResourceBookingId = res.BookableResourceBookingId,
            Name = res.Name,
            StartTime = res.StartTime,
            EndTime = res.EndTime,
            WOName = res.WorkOrder == null ? "" : res.WorkOrder.Name,
            WOAddressName = res.WorkOrder == null ? "" : res.WorkOrder.Addressname,
            WOAddress1 = res.WorkOrder == null ? "" : res.WorkOrder.Address1,
            WOSummary = res.WorkOrder == null ? "" : res.WorkOrder.WorkOrderSummary,
            StatusName = res.BookingStatus.Name == null ? "" : res.BookingStatus.Name
        });

        var resultList = list.ToList<BookedResourceScreen>();
        return resultList;
    }

    public void RowSelectedHandler(RowSelectEventArgs<BookedResourceScreen> args)
    {
        var id = args.Data.BookableResourceBookingId;
        var url = "/BookedResourcePage/" + id + "/";
        navigationManager.NavigateTo(url);
    }
    #endregion
}
<style>
    .container {
        display: grid;
    }
        .container > div {
            background-color: brown;
        }
</style>
