@page "/BookingPage"
@attribute [Authorize]

@using AspNetMonsters.Blazor.Geolocation
@using System.Collections.ObjectModel
@using System.ComponentModel
@using Syncfusion.Blazor.Grids
@using FieldServiceT.Models
@using Newtonsoft.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@using Microsoft.Extensions.Configuration
@using FieldServiceT.Helpers
@using Microsoft.IdentityModel.Clients.ActiveDirectory
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.OData
@using Microsoft.OData.Client
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager navigationManager
@inject IConfiguration configuration
@inject BrowserService browserService
@inject TokenService tokenService

<div style="width:100%; height:100vh; font-size:9px">
    <div style="cursor:pointer; width:100%; height:100%;">
        <p><em>Booking</em></p>
        <SfGrid DataSource="@DataSourceList" AllowFiltering="true" AllowSorting="true" AllowPaging="true" Height="100%" ShowColumnMenu="true" AllowTextWrap="false">
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
            <GridEvents RowSelected="RowSelectedHandler" TValue="BookedResourceScreen"></GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(BookedResourceScreen.BookableResourceBookingId) HeaderText="Id"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="0"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.Name) HeaderText="NAME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.StartTime) HeaderText="START TIME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Format="d" Width="70"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.EndTime) HeaderText="END TIME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Format="d" Width="70" HideAtMedia="(min-width: 481px)"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOName) HeaderText="WO NAME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="60" HideAtMedia="(min-width: 481px)"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOAddress1) HeaderText="ADDRESS1"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOAddressName) HeaderText="ADDRESS NAME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="80" HideAtMedia="(min-width: 481px)"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOSummary) HeaderText="SUMMARY"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="0" HideAtMedia="(min-width: 481px)"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.StatusName) HeaderText="STATUS"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="50"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@code
{
    #region Links
    // https://docs.microsoft.com/en-us/dynamics365/customer-engagement/web-api/bookableresourcebooking?view=dynamics-ce-odata-9
    // https://docs.microsoft.com/en-us/dynamics365/customer-engagement/web-api/bookableresourcebooking?view=dynamics-ce-odata-9#single-valued-navigation-properties
    // https://42clouds.com/ru-ru/techdocs/interfeys-odata-vozmozhnosti-i-nastroyka.html#link10
    #endregion

    #region Code

    #region Declarations

    private string selectedId;

    //private AuthenticationResult token;
    //private string bookableResourceId;

    private List<BookedResourceScreen> DataSourceList { get; set; }

    [CascadingParameter]
    Task<AuthenticationState> authenticationState { get; set; }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        DataSourceList = new List<BookedResourceScreen>();
        string baseUrl = configuration["BaseUrl"];

        var token = (await tokenService.GetAuthenticationResultAsync()).AccessToken;
        var userMail = (await authenticationState).User.Identity.Name;
        var userId = (await GetSystemUserAsync(baseUrl, userMail, token)).SystemUserId;

        string bookableResourceId = await GetBookableResourceIdAsync(baseUrl, userId, token);

        if (bookableResourceId == null) { DataSourceList = null; return; }

        DataSourceList = await GetBookableResourceBookingsAsync(baseUrl, token, bookableResourceId);
    }

    private async Task<SystemUser> GetSystemUserAsync(string baseUrl, string userMail, string accessToken)
    {
        string query = baseUrl + "systemusers?$select=systemuserid,fullname&$filter=internalemailaddress eq '" + userMail + "'";
        using (var client = new System.Net.Http.HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var response = await client.GetAsync(new Uri(query));
            var strjson = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<ODataResponse<SystemUser>>(strjson).Value.First<SystemUser>();
            return result;
        }
    }

    private async Task<string> GetBookableResourceIdAsync(string baseUrl, string userId, string accessToken)
    {
        {
            string query = baseUrl + "bookableresources";
            query += "?$select=bookableresourceid";
            query += "&$filter=_userid_value eq '" + userId + "'";

            using (var client = new System.Net.Http.HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

                var response = await client.GetAsync(new Uri(query));
                var strjson = await response.Content.ReadAsStringAsync();

                var result = JsonConvert.DeserializeObject<ODataResponse<BookableResource>>(strjson).Value.FirstOrDefault<BookableResource>();

                if (result == null)
                    return null;
                else
                    return result.BookableResourceId;
            }
        }
    }

    private async Task<List<BookedResourceScreen>> GetBookableResourceBookingsAsync(string baseUrl, string accessToken, string bookableResourceId)
    {
        string query = baseUrl + "bookableresourcebookings";
        query += "?$filter=_resource_value eq '" + bookableResourceId + "'";
        query += "&$select=name,starttime,endtime";
        query += "&$expand=msdyn_workorder($select = msdyn_name, msdyn_address1,msdyn_addressname,msdyn_workordersummary ),";
        query += "BookingStatus($select=name)";

        using (var client = new System.Net.Http.HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var response = await client.GetAsync(new Uri(query));
            var strjson = await response.Content.ReadAsStringAsync();

            var result = JsonConvert.DeserializeObject<ODataResponse<BookedResource>>(strjson).Value;

            var list = result.Select(res => new BookedResourceScreen()
            {
                BookableResourceBookingId = res.BookableResourceBookingId,
                Name = res.Name,
                StartTime = res.StartTime,
                EndTime = res.EndTime,
                WOName = res.WorkOrder == null ? "" : res.WorkOrder.Name,
                WOAddressName = res.WorkOrder == null ? "" : res.WorkOrder.Addressname,
                WOAddress1 = res.WorkOrder == null ? "" : res.WorkOrder.Address1,
                WOSummary = res.WorkOrder == null ? "" : res.WorkOrder.WorkOrderSummary,
                StatusName = res.BookingStatus.Name == null ? "" : res.BookingStatus.Name
            });

            var resultList = list.ToList<BookedResourceScreen>();
            return resultList;
        }
    }

    public void RowSelectedHandler(RowSelectEventArgs<BookedResourceScreen> args)
    {
        var id = args.Data.BookableResourceBookingId;
        var url = "/BookedResourcePage/" + id + "/"; // + token.AccessToken;
        navigationManager.NavigateTo(url);
    }
    #endregion
}
<style>
    .container {
        display: grid;
    }

        .container > div {
            background-color: brown;
        }
</style>
