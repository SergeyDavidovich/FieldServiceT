@page "/BookedResourcePage/{ResourceId}/{Token}"
@*@attribute [Authorize]*@

@inject LocationService  locationService

@using AspNetMonsters.Blazor.Geolocation

@using System.Text.Json
@using Microsoft.OData
@using Microsoft.OData.Client
@using Newtonsoft.Json.Serialization
@using System.Collections.ObjectModel
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using FieldServiceT.Models
@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons

<div id="grid">
    <div style="margin-top:2px; margin-bottom:2px; padding:10px;  border: solid 1px lightgray; background-color:antiquewhite; font-size:smaller">
        <table border="0" width="100%">
            <tr>
                <td width="120">
                    Latitude:
                </td>
                <td width="120">
                    <b>@location?.Latitude</b>
                </td>
                <td>
                    <button class="btn btn-primary btn-sm button-geo" type="button" @onclick="GetLocation">Location</button>
                </td>
            </tr>
            <tr>
                <td width="120">
                    Longitude:
                </td>
                <td width="120">
                    <b>@location?.Longitude</b>
                </td>
                <td>
                    <button class="btn btn-danger btn-sm button-geo" type="button" @onclick="ResetLocation">Reset</button>
                </td>
            </tr>
            <tr>
                <td>
                    Accuracy:
                </td>
                <td>
                    <b>@location?.Accuracy</b>
                </td>
            </tr>
        </table>
    </div>
    <div style="margin-left:10px;">
        <SfButton type="button" class="btn btn-success btn-sm">Button 1</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm">Button 2</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm">Button 3</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm">Button 4</SfButton>
    </div>
    <div id="sub-grid" style="font-size:smaller">
        <div>
            <SfCard>
                <CardHeader Title="RESOURCE DATA"></CardHeader>
                <CardContent>
                    <div id="inner-grid">
                        @*<label>Resource id:</label>
                        <label><b>@Resource.BookableResourceBookingId</b></label>*@
                        <label>Created on:</label>
                        <label><b>@Resource.CreatedOn</b></label>
                        <label>Duration:</label>
                        <label><b>@Resource.Duration</b></label>
                        <label>End time:</label>
                        <label><b>@Resource.EndTime</b></label>
                        <label>Name:</label>
                        <label><b>@Resource.Name</b></label>
                        <label>Status:</label>
                        <label><b>@Resource.StatusName</b></label>
                    </div>
                </CardContent>
                <CardFooter>
                    <CardFooterContent>
                    </CardFooterContent>
                </CardFooter>
            </SfCard>
        </div>
        <div>
            <SfCard>
                <CardHeader Title="WORK ORDER DATA"></CardHeader>
                <CardContent>
                    <div id="inner-grid">Content</div>
                </CardContent>
                <CardContent EnableSeperator="true"></CardContent>
                <CardFooter>
                    <CardFooterContent>
                    </CardFooterContent>
                </CardFooter>
            </SfCard>
        </div>
    </div>
</div>

@code {
    #region
    [Parameter]
    public string ResourceId { get; set; }

    [Parameter]
    public string Token { get; set; }

    [CascadingParameter]
    RouteData RouteData { get; set; }

    string url = "https://eg8pfua3iofsrjt3zb.crm.dynamics.com/api/data/v9.0/bookableresourcebookings/";

    public BookedResource Resource { get; set; }

    Location location;
    double? Latitude;
    double? Longitude;


    protected override async Task OnInitializedAsync()
    {
        Resource = new BookedResource();
        await GetResource();
    }

    private async Task GetLocation()
    {
        location = await locationService.GetLocationAsync();
        Latitude = (double)location.Latitude;
        Longitude = (double)location.Longitude;
    }
    private void ResetLocation()
    {
        location = null;
        Latitude = null;
        Longitude = null;
    }

    private async Task GetResource()
    {
        {
            string query = $"?$filter=bookableresourcebookingid eq '{ResourceId}'";

            string resourceuri = url + query;

            using (var client = new System.Net.Http.HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

                var response = await client.GetAsync(new Uri(resourceuri));
                var strjson = await response.Content.ReadAsStringAsync();

                var result = JsonConvert.DeserializeObject<ODataResponse<BookedResource>>(strjson);

                var resource = result.Value.First<BookedResource>();

                Resource = resource;
            }
        }
    }

    internal class ODataResponse<T>
    {
        public List<T> Value
        {
            get;
            set;
        }
    }

    public ObservableCollection<MarkerData> MarkerDataSource { get; set; }

    public class MarkerData
    {
        public double latitude { get; set; }
        public double longitude { get; set; }
        public string name { get; set; }

        public ObservableCollection<MarkerData> GetData()
        {
            ObservableCollection<MarkerData> MarkerDataSource = new ObservableCollection<MarkerData>() {
                new MarkerData{ latitude= 50.5716595, longitude= 19.3219768, name= "Zory" }
            };
            return MarkerDataSource;
        }
    }
    #endregion
}

<style>
    #grid {
        display: grid;
        grid-template-rows: repeat(3, auto);
        grid-gap: 6px;
    }
    #inner-grid{
        display:grid;
        grid-template-columns: 1fr 1fr;
    }
    label {
        color: black;
    }

    .button-geo {
        width: 80px;
        margin: 4px;
    }
</style>

@*Lat: 50,5716595
    Long: 19,3219768*@
