@page "/BookedResourcePage/{ResourceId}/{Token}"
@attribute [Authorize]

@inject LocationService  locationService
@inject Microsoft.Extensions.Configuration.IConfiguration configuration

@using AspNetMonsters.Blazor.Geolocation

@*@using System.Text.Json*@
@using Microsoft.OData
@using Microsoft.OData.Client
@using Newtonsoft.Json.Serialization
@using System.Collections.ObjectModel
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using FieldServiceT.Models
@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using System.Net.Http

<div id="grid">
    @*<div style="margin-top:2px; margin-bottom:2px; padding:10px;  border: solid 1px lightgray; background-color:antiquewhite; font-size:smaller">
            <table border="0" width="100%">
                <tr>
                    <td width="120">
                        Latitude:
                    </td>
                    <td width="120">
                        <b>@location?.Latitude</b>
                    </td>
                    <td>
                        <button class="btn btn-primary btn-sm button-geo" type="button" @onclick="GetLocation">Location</button>
                    </td>
                </tr>
                <tr>
                    <td width="120">
                        Longitude:
                    </td>
                    <td width="120">
                        <b>@location?.Longitude</b>
                    </td>
                    <td>
                        <button class="btn btn-danger btn-sm button-geo" type="button" @onclick="ResetLocation">Reset</button>
                    </td>
                </tr>
                <tr>
                    <td>
                        Accuracy:
                    </td>
                    <td>
                        <b>@location?.Accuracy</b>
                    </td>
                </tr>
            </table>
        </div>*@

    <div style="margin-left:10px;">
        <SfButton type="button" class="btn btn-success btn-sm button-geo" OnClick="@Button_EnRoute_Handler">En-Route</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm button-geo" OnClick="@Button_OnSite_Handler">On-Site</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm button-geo" OnClick="@Button_OffSite_Handler">Off-site</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm button-geo" OnClick="@Button_WorkComplete_Handler">Complete</SfButton>
    </div>
    <hr />

    @*<p>Id: <b>@Resource.BookableResourceBookingId</b></p>*@
    <p>Name: <b>@Resource.Name</b></p>
    <p>Start time: <b>@Resource.StartTime</b></p>
    <p>End time: <b>@Resource.EndTime</b></p>
    <p>Work order Name: <b>@Resource.WOName</b></p>
    <p>Work order Address1: <b>@Resource.WOAddress1</b></p>
    <p>Work order AddressName:<b>@Resource.WOAddressName</b></p>
    <p>Work order Summary:<b>@Resource.WOSummary</b></p>

    <!--<div id="inner-grid" class="col-lg-12 control-section">
        <div class="e-sample-resize-container">
            <SfTab CssClass="default-tab">
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="RESOURCE DATA" IconCss="e-twitter"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <p>-->
    @*Id: @Resource.BookableResourceBookingId*@
    <!--</p>
                            <p>Name: <b>@Resource.Name</b></p>
                            <p>Start time: <b>@Resource.StartTime</b></p>
                            <p>End time: <b>@Resource.EndTime</b></p>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="ORDER DATA" IconCss="e-facebook"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <p>WOName: <b>@Resource.WOName</b></p>
                            <p>WOAddress1: <b>@Resource.WOAddress1</b></p>
                            <p>WOAddressName: <b>@Resource.WOAddressName</b></p>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
        </div>
    </div>-->
    <!--<div id="sub-grid" style="font-size:smaller">
        <div>
            <SfCard>
                <CardHeader Title="RESOURCE DATA"></CardHeader>-->
    @*<CardContent>
            <div id="inner-grid">
                <label>Resource id:</label>
                <label><b>@Resource.BookableResourceBookingId</b></label>
                <label>Created on:</label>
                <label><b>@Resource.CreatedOn</b></label>
                <label>Duration:</label>
                <label><b>@Resource.Duration</b></label>
                <label>End time:</label>
                <label><b>@Resource.EndTime</b></label>
                <label>Name:</label>
                <label><b>@Resource.Name</b></label>
                <label>Status:</label>
                <label><b>@Resource.StatusName</b></label>
            </div>
        </CardContent>*@
    <!--<CardFooter>
                    <CardFooterContent>
                    </CardFooterContent>
                </CardFooter>
            </SfCard>
        </div>
        <div>
            <SfCard>
                <CardHeader Title="WORK ORDER DATA"></CardHeader>
                <CardContent>
                    <div id="inner-grid">Content</div>
                </CardContent>
                <CardContent EnableSeperator="true"></CardContent>
                <CardFooter>
                    <CardFooterContent>
                    </CardFooterContent>
                </CardFooter>
            </SfCard>
        </div>
    </div>-->
</div>

@code {

    #region Declarations
    [Parameter]
    public string ResourceId { get; set; }

    [Parameter]
    public string Token { get; set; }

    [CascadingParameter]
    RouteData RouteData { get; set; }

    string baseUrl;
    string webHookUrl;

    public BookedResourceScreen Resource { get; set; }

    Location location;
    double? Latitude;
    double? Longitude;

    #endregion


    protected override async Task OnInitializedAsync()
    {
        baseUrl = configuration["BaseUrl"];
        webHookUrl = configuration["WebHookUrl"];
        Resource = new BookedResourceScreen();

        await GetResource();
    }

    private async Task GetLocationAsync()
    {
        location = await locationService.GetLocationAsync();
        Latitude = (double)location.Latitude;
        Longitude = (double)location.Longitude;
    }
    private void ResetLocation()
    {
        location = null;
        Latitude = null;
        Longitude = null;
    }

    private async Task GetResource()
    {
        {
            string query = baseUrl + "bookableresourcebookings/";
            query += $"?$filter=bookableresourcebookingid eq '" + ResourceId + "'";
            query += "&$select=name,starttime,endtime";
            query += "&$expand=msdyn_workorder($select = msdyn_name, msdyn_address1,msdyn_addressname)";

            using (var client = new System.Net.Http.HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);

                var response = await client.GetAsync(new Uri(query));
                var strjson = await response.Content.ReadAsStringAsync();

                var result = JsonConvert.DeserializeObject<ODataResponse<BookedResource>>(strjson);

                var resource = result.Value.First<BookedResource>();

                var flatResource = new BookedResourceScreen()
                {
                    BookableResourceBookingId = resource.BookableResourceBookingId,
                    Name = resource.Name,
                    StartTime = resource.StartTime,
                    EndTime = resource.EndTime,
                    WOName = resource.WorkOrder != null ? resource.WorkOrder.Name : null,
                    WOAddressName = resource.WorkOrder != null ? resource.WorkOrder.Addressname : null,
                    WOAddress1 = resource.WorkOrder != null ? resource.WorkOrder.Address1 : null
                };

                Resource = flatResource;
            }
        }
    }

    private async Task Button_EnRoute_Handler(MouseEventArgs args)
    {
        await PostLocationData("En-Route");
    }
    private async Task Button_OnSite_Handler(MouseEventArgs args)
    {
        await PostLocationData("On-Site");
    }
    private async Task Button_OffSite_Handler(MouseEventArgs args)
    {
        await PostLocationData("Off-site");
    }
    private async Task Button_WorkComplete_Handler(MouseEventArgs args)
    {
        await PostLocationData("Work Complete");
    }

    private async Task PostLocationData(string buttonId)
    {
        await GetLocationAsync();

        var location = new LocationValue()
        {
            Latitude = Latitude.ToString(),
            Longitude = Longitude.ToString(),
            BKBid = ResourceId,
            ButtonId = buttonId
        };

        using (var client = new System.Net.Http.HttpClient())
        {
            string json = JsonConvert.SerializeObject(location);
            HttpContent content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var response = await client.PostAsync(webHookUrl, content);
        }
    }

}

