@page "/BookedResourcePage/{ResourceId}"
@attribute [Authorize]

@inject LocationService  locationService
@inject Microsoft.Extensions.Configuration.IConfiguration configuration
@inject FieldServiceT.Helpers.TokenService tokenService

@using AspNetMonsters.Blazor.Geolocation
@using Microsoft.Extensions.Configuration
@using Microsoft.OData
@using Microsoft.OData.Client
@using Newtonsoft.Json.Serialization
@using System.Collections.ObjectModel
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using FieldServiceT.Models
@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using System.Net.Http
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Notifications

@*<p>Id: <b>@Resource.BookableResourceBookingId</b></p>*@
<div id="grid">
    <div class="btn-group mr-2" role="group" aria-label="Basic example">
        <SfButton type="button" class="btn btn-success btn-sm button-geo btn-hor" OnClick="@Button_EnRoute_Handler">En-Route</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm button-geo btn-hor" OnClick="@Button_OnSite_Handler">On-Site</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm button-geo btn-hor" OnClick="@Button_OffSite_Handler">Off-site</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm button-geo btn-hor" OnClick="@Button_WorkComplete_Handler">Complete</SfButton>
    </div>
    <div class="card" style="font-size: smaller">
        <dl class="list-group list-group-flush" style="margin-left:6px">
            <dd>Name: <b>@DataObject.Name</b></dd>
            <dd>Start time: <b>@DataObject.EndTime</b></dd>
            <dd>End time: <b>@DataObject.EndTime</b></dd>
            <dd>Work order Name:<b>@DataObject.WOName</b></dd>
            <dd>Work order Address1: <b>@DataObject.WOAddress1</b></dd>
            <dd>Work order AddressName:<b>@DataObject.WOAddressName</b></dd>
            <dd>Status:<b>@DataObject.StatusName</b></dd>
        </dl>
    </div>
    <div id="maps" style="position:relative">
        <SfMaps @ref="MapsElement" Background="lightgray" CenterPosition="@CenterPosition">
            <MapsEvents OnLoad="@OnLoadHandler"></MapsEvents>
            <MapsZoomSettings ZoomFactor="2" EnablePanning="true" Enable="true" HorizontalAlignment="Syncfusion.Blazor.Maps.Alignment.Near" 
                              ShouldZoomInitially="true"></MapsZoomSettings>
            <MapsLayers>
                <MapsLayer LayerType="ShapeLayerType.Bing" BingMapType="BingMapType.Road" ShapeData='new {dataOptions ="https://cdn.syncfusion.com/maps/map-data/world-map.json"}' Key="@BingKey">
                    <MapsMarkerSettings>
                        <MapsMarker Visible="true" DataSource="@Markers" Shape="MarkerType.Balloon" Height="35" Width="35" AnimationDuration="700">
                        </MapsMarker>
                    </MapsMarkerSettings>
                </MapsLayer>
            </MapsLayers>
        </SfMaps>
    </div>
    <div id="dialog" style="">
        <SfDialog Width="350" Height="140" ShowCloseIcon="true" IsModal="true" @bind-Visible="@DialogIsVisible">
            <DialogTemplates>
                <Header>Resourse status changed</Header>
                <Content>@DialogStatus</Content>
            </DialogTemplates>
        </SfDialog>
    </div>
</div>

@code {
    #region

    #region Declarations
    [Parameter]
    public string ResourceId { get; set; }

    [CascadingParameter]
    RouteData RouteData { get; set; }

    string baseUrl;
    string webHookUrl;

    SfMaps MapsElement;


    public BookedResourceScreen DataObject { get; set; }

    private string BingKey { get; set; }

    Location UserLocation;
    double UserLatitude;
    double UserLongitude;

    Location WorkOrderLocation;
    string WorkOrderLatitude;
    string WorkOrderLongitude;

    List<Location> Markers;
    MapsCenterPosition CenterPosition { get; set; }

    public bool DialogIsVisible { get; set; }
    private string DialogStatus { get; set; }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        baseUrl = configuration["BaseUrl"];
        webHookUrl = configuration["WebHookUrl"];
        BingKey = configuration["BingMapKey"]; // "At-1BZxXI0CTEChNSVwJCskA5Y4UQC2YyS-8A2Ed4hRCz5s92XQL8MgndhMzqmL3";
        DataObject = new BookedResourceScreen();
        var token = await tokenService.GetAuthenticationResultAsync();

        var resource = await GetBookableResourceBookingsByIdAsync(baseUrl, ResourceId, token.AccessToken);
        var order = resource.WorkOrder;

        Markers = new List<Location>();

        UserLocation = await locationService.GetLocationAsync();
        UserLatitude = (double)UserLocation.Latitude;
        UserLongitude = (double)UserLocation.Longitude;

        Markers.Add(UserLocation);

        if (order != null) Markers.AddRange(GetMarkers(resource));

        DataObject = GetMappedToScreenObject(resource);
    }

    private void OnLoadHandler(ILoadEventArgs args)
    {
        CenterPosition = MapsElement.CenterPosition;
    }

    #region Private functions

    private async Task<BookedResource> GetBookableResourceBookingsByIdAsync(string baseUrl, string resourceId, string accessToken)
    {
        {
            string query = baseUrl + "bookableresourcebookings/";
            query += $"?$filter=bookableresourcebookingid eq '" + ResourceId + "'";
            query += "&$select=name,starttime,endtime";
            query += "&$expand=msdyn_workorder($select = msdyn_name, msdyn_address1,msdyn_addressname,msdyn_workordersummary,msdyn_latitude,msdyn_longitude),";
            query += "BookingStatus($select=name)";

            using (var client = new System.Net.Http.HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

                var response = await client.GetAsync(new Uri(query));
                var strjson = await response.Content.ReadAsStringAsync();

                var result = JsonConvert.DeserializeObject<ODataResponse<BookedResource>>(strjson);

                var resource = result.Value.First<BookedResource>();
                return resource;
            }
        }
    }

    private List<Location> GetMarkers(BookedResource resource)
    {
        WorkOrderLocation = new Location() { Latitude = (decimal)resource.WorkOrder.Latitude, Longitude = (decimal)resource.WorkOrder.Longtitude };
        WorkOrderLatitude = WorkOrderLocation.Latitude.ToString();
        WorkOrderLongitude = WorkOrderLocation.Longitude.ToString();

        //UserLocation = await locationService.GetLocationAsync();
        //UserLatitude = (double)UserLocation.Latitude;
        //UserLongitude = (double)UserLocation.Longitude;

        List<Location> markers = new List<Location>() { WorkOrderLocation };
        return markers;
    }

    private BookedResourceScreen GetMappedToScreenObject(BookedResource resource)
    {
        var screenResource = new BookedResourceScreen()
        {
            BookableResourceBookingId = resource.BookableResourceBookingId,
            Name = resource.Name,
            StartTime = resource.StartTime,
            EndTime = resource.EndTime,

            WOName = resource.WorkOrder == null ? null : resource.WorkOrder.Name,
            WOAddressName = resource.WorkOrder == null ? null : resource.WorkOrder.Addressname,
            WOAddress1 = resource.WorkOrder == null ? null : resource.WorkOrder.Address1,
            StatusName = resource.WorkOrder == null ? null : resource.BookingStatus.Name,
            WOSummary = resource.WorkOrder == null ? null : resource.WorkOrder.WorkOrderSummary
        };

        return screenResource;
    }



    #endregion

    #region Buttons Event handlers

    private async Task Button_EnRoute_Handler(MouseEventArgs args)
    {
        await PostLocationData("En-Route");
    }
    private async Task Button_OnSite_Handler(MouseEventArgs args)
    {
        await PostLocationData("On-Site");
    }
    private async Task Button_OffSite_Handler(MouseEventArgs args)
    {
        await PostLocationData("Off-site");
    }
    private async Task Button_WorkComplete_Handler(MouseEventArgs args)
    {
        await PostLocationData("Work Complete");
    }

    private async Task PostLocationData(string buttonId)
    {
        this.DialogStatus = "Status updated successfully to " + buttonId;
        this.DialogIsVisible = true;

        //await GetLocationAsync();

        var location = new LocationValue()
        {
            Latitude = UserLatitude.ToString(),
            Longitude = UserLongitude.ToString(),
            BKBid = ResourceId,
            ButtonId = buttonId
        };

        using (var client = new System.Net.Http.HttpClient())
        {
            string json = JsonConvert.SerializeObject(location);
            HttpContent content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var response = await client.PostAsync(webHookUrl, content);
        }
    }

    #endregion

    #endregion
}
<style>
    #grid {
        display: grid;
        grid-template-rows: auto auto;
        grid-row-gap: 2px;
        margin: 2px;
        background-color: white;
        height: 100%;
    }

        #grid > div {
            margin-left: 6px;
            margin-right: 6px;
            border: 1px solid lightGray;
            border-radius: 4px;
        }

    p {
        margin-left: 12px;
    }

    .btn-hor {
        margin: 12px;
    }
</style>

