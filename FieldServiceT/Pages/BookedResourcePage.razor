@page "/BookedResourcePage/{ResourceId}"
@attribute [Authorize]

@inject LocationService  locationService
@inject Microsoft.Extensions.Configuration.IConfiguration configuration
@inject FieldServiceT.Helpers.TokenService tokenService

@using AspNetMonsters.Blazor.Geolocation
@using Microsoft.OData
@using Microsoft.OData.Client
@using Newtonsoft.Json.Serialization
@using System.Collections.ObjectModel
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using FieldServiceT.Models
@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using System.Net.Http
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Notifications

<div id="grid">
    <div>
        <SfDialog Width="350" Height="140" ShowCloseIcon="true" IsModal="true" @bind-Visible="@DialogIsVisible">
            <DialogTemplates>
                <Header>Resourse status changed</Header>
                <Content>@DialogStatus</Content>
            </DialogTemplates>
        </SfDialog>
    </div>
    @*<p style="color:green; padding2px;">@DialogStatus</p>*@
    <div style="margin-left:10px; margin-top:4px">
        <SfButton type="button" class="btn btn-success btn-sm button-geo" OnClick="@Button_EnRoute_Handler">En-Route</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm button-geo" OnClick="@Button_OnSite_Handler">On-Site</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm button-geo" OnClick="@Button_OffSite_Handler">Off-site</SfButton>
        <SfButton type="button" class="btn btn-success btn-sm button-geo" OnClick="@Button_WorkComplete_Handler">Complete</SfButton>
    </div>
    <hr />

    @*<p>Id: <b>@Resource.BookableResourceBookingId</b></p>*@
    <p>Name: <b>@DataObject.Name</b></p>
    <p>Start time: <b>@DataObject.StartTime</b></p>
    <p>End time: <b>@DataObject.EndTime</b></p>
    <p>Work order Name: <b>@DataObject.WOName</b></p>
    <p>Work order Address1: <b>@DataObject.WOAddress1</b></p>
    <p>Work order AddressName:<b>@DataObject.WOAddressName</b></p>
    <p>Work order Summary:<b>@DataObject.WOSummary</b></p>
    <p>Status:<b>@DataObject.StatusName</b></p>
    <div>
        <!--<div id="inner-grid" class="col-lg-12 control-section">
        <div class="e-sample-resize-container">
            <SfTab CssClass="default-tab">
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="RESOURCE DATA" IconCss="e-twitter"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <p>-->
        @*Id: @Resource.BookableResourceBookingId*@
        <!--</p>
                                <p>Name: <b>@Resource.Name</b></p>
                                <p>Start time: <b>@Resource.StartTime</b></p>
                                <p>End time: <b>@Resource.EndTime</b></p>
                            </ContentTemplate>
                        </TabItem>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="ORDER DATA" IconCss="e-facebook"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <p>WOName: <b>@Resource.WOName</b></p>
                                <p>WOAddress1: <b>@Resource.WOAddress1</b></p>
                                <p>WOAddressName: <b>@Resource.WOAddressName</b></p>
                            </ContentTemplate>
                        </TabItem>
                    </TabItems>
                </SfTab>
            </div>
        </div>-->
        <!--<div id="sub-grid" style="font-size:smaller">
        <div>
            <SfCard>
                <CardHeader Title="RESOURCE DATA"></CardHeader>-->
        @*<CardContent>
                <div id="inner-grid">
                    <label>Resource id:</label>
                    <label><b>@Resource.BookableResourceBookingId</b></label>
                    <label>Created on:</label>
                    <label><b>@Resource.CreatedOn</b></label>
                    <label>Duration:</label>
                    <label><b>@Resource.Duration</b></label>
                    <label>End time:</label>
                    <label><b>@Resource.EndTime</b></label>
                    <label>Name:</label>
                    <label><b>@Resource.Name</b></label>
                    <label>Status:</label>
                    <label><b>@Resource.StatusName</b></label>
                </div>
            </CardContent>*@
        <!--<CardFooter>
                        <CardFooterContent>
                        </CardFooterContent>
                    </CardFooter>
                </SfCard>
            </div>
            <div>
                <SfCard>
                    <CardHeader Title="WORK ORDER DATA"></CardHeader>
                    <CardContent>
                        <div id="inner-grid">Content</div>
                    </CardContent>
                    <CardContent EnableSeperator="true"></CardContent>
                    <CardFooter>
                        <CardFooterContent>
                        </CardFooterContent>
                    </CardFooter>
                </SfCard>
            </div>
        </div>-->
    </div>
</div>

@code {
    #region

    #region Declarations
    [Parameter]
    public string ResourceId { get; set; }

    //[Parameter]
    //public string Token { get; set; }

    [CascadingParameter]
    RouteData RouteData { get; set; }

    string baseUrl;
    string webHookUrl;

    public BookedResourceScreen DataObject { get; set; }

    Location location;
    double? Latitude;
    double? Longitude;

    public bool DialogIsVisible { get; set; }
    private string DialogStatus { get; set; }

    #endregion


    protected override async Task OnInitializedAsync()
    {
        baseUrl = configuration["BaseUrl"];
        webHookUrl = configuration["WebHookUrl"];
        DataObject = new BookedResourceScreen();
        var token = await tokenService.GetAuthenticationResultAsync();

        var resource = await GetBookableResourceBookingsByIdAsync(baseUrl, ResourceId, token.AccessToken);

        DataObject = MappedToScreenObject(resource);
    }

    private async Task GetLocationAsync()
    {
        location = await locationService.GetLocationAsync();
        Latitude = (double)location.Latitude;
        Longitude = (double)location.Longitude;
    }
    private void ResetLocation()
    {
        location = null;
        Latitude = null;
        Longitude = null;
    }

    private async Task<BookedResource> GetBookableResourceBookingsByIdAsync(string baseUrl, string resourceId, string accessToken)
    {
        {
            string query = baseUrl + "bookableresourcebookings/";
            query += $"?$filter=bookableresourcebookingid eq '" + ResourceId + "'";
            query += "&$select=name,starttime,endtime";
            query += "&$expand=msdyn_workorder($select = msdyn_name, msdyn_address1,msdyn_addressname,msdyn_workordersummary),";
            query += "BookingStatus($select=name)";

            using (var client = new System.Net.Http.HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

                var response = await client.GetAsync(new Uri(query));
                var strjson = await response.Content.ReadAsStringAsync();

                var result = JsonConvert.DeserializeObject<ODataResponse<BookedResource>>(strjson);

                var resource = result.Value.First<BookedResource>();
                return resource;
            }
        }
    }

    private BookedResourceScreen MappedToScreenObject(BookedResource resource)
    {
        var screenResource = new BookedResourceScreen()
        {
            BookableResourceBookingId = resource.BookableResourceBookingId,
            Name = resource.Name,
            StartTime = resource.StartTime,
            EndTime = resource.EndTime,

            WOName = resource.WorkOrder == null ? null: resource.WorkOrder.Name,
            WOAddressName = resource.WorkOrder == null ? null : resource.WorkOrder.Addressname,
            WOAddress1 = resource.WorkOrder == null ? null : resource.WorkOrder.Address1,
            StatusName = resource.WorkOrder == null ? null : resource.BookingStatus.Name,
            WOSummary = resource.WorkOrder == null ? null : resource.WorkOrder.WorkOrderSummary
        };

        return screenResource;
    }
    #region Event handlers

    private async Task Button_EnRoute_Handler(MouseEventArgs args)
    {
        await PostLocationData("En-Route");
    }
    private async Task Button_OnSite_Handler(MouseEventArgs args)
    {
        await PostLocationData("On-Site");
    }
    private async Task Button_OffSite_Handler(MouseEventArgs args)
    {
        await PostLocationData("Off-site");
    }
    private async Task Button_WorkComplete_Handler(MouseEventArgs args)
    {
        await PostLocationData("Work Complete");
    }

    private async Task PostLocationData(string buttonId)
    {
        this.DialogStatus = "Status updated successfully to " + buttonId;
        this.DialogIsVisible = true;

        await GetLocationAsync();

        var location = new LocationValue()
        {
            Latitude = Latitude.ToString(),
            Longitude = Longitude.ToString(),
            BKBid = ResourceId,
            ButtonId = buttonId
        };

        using (var client = new System.Net.Http.HttpClient())
        {
            string json = JsonConvert.SerializeObject(location);
            HttpContent content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var response = await client.PostAsync(webHookUrl, content);
        }
    }
    #endregion
    #endregion
}
<style>
    p {
        margin-left: 12px;
    }
</style>

