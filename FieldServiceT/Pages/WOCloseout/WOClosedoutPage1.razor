@layout WOCLosedoutLayout
@page "/WOCloseOutPage1"

@using FieldServiceT.Pages.WOCloseout
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.InPlaceEditor
@using Syncfusion.Blazor.Inputs
@using FieldServiceT.Models

<div style="padding:6px;">
    <p><span style="color:red;">*</span>Required</p>
    <p>Notes</p>
    <p>
        Please be detailed, organized and professional. This will assist in the efficient submission to the client for approval and payment.
    </p>
    <div>
        @*<p>1.Totality Work Order Number<span> *</span></p>
            <p>You MUST include zero's!</p>
            <SfTextBox @ref="Answer1" ShowClearButton="true" Placeholder="Enter the answer" @onfocusout="@(e=>OnFocusOut1(e))"></SfTextBox>*@
    </div>
    <div>
        <p>@question2</p>
        <p>leave blank if none provided</p>
        <SfTextBox @ref="@Answer2" Placeholder="Enter the answer" @onfocusout="@(e=>OnFocusOut("2"))"></SfTextBox>
    </div>
    <div>
        <p>@question3</p>
        <SfTextBox @ref="@Answer3" Placeholder="Enter the answer" @onfocusout="@(e=>OnFocusOut("3"))"></SfTextBox>
    </div>
    <div>
        <p>@question4<span> *</span></p>
        <p>Please provide your detailed and organized close out notes including any relevant info necessary to submit work order to the client for approval efficiently.</p>
        <SfTextBox @ref="@Answer4" Placeholder="Enter the answer" @onfocusout="@(e=>OnFocusOut("4"))"></SfTextBox>
    </div>
</div>

@code {
    #region

    const string question2 = "2.Client Assignment/Case ID";
    const string question3 = "3.MOD Name";
    const string question4 = "4.Detailed Close Out Notes";

    SfTextBox Answer2;
    SfTextBox Answer3;
    SfTextBox Answer4;

    List<int> RequiredAnswers = new List<int>() { 2, 4 };

    public bool FlagAllRequiredAnswered { get; set; }
    public List<QuestionnaireItem> Quetionnaire1 { get; set; }

    private string CurrentQuestion;
    private string CurrentAnswer;

    protected override void OnInitialized()
    {
        Quetionnaire1 = new List<QuestionnaireItem>();
    }

    public void OnFocusOut(string index)
    {
        switch (index)
        {
            case "2":
                CurrentQuestion = question2;
                CurrentAnswer = Answer2.Value;
                RequiredAnswers.Remove(2);
                break;
            case "3":
                CurrentQuestion = question3;
                CurrentAnswer = Answer3.Value;
                break;
            case "4":
                CurrentQuestion = question4;
                CurrentAnswer = Answer4.Value;
                RequiredAnswers.Remove(4);
                break;
        }

        QuestionnaireItem answer = Quetionnaire1.Find(item => item.QuestionnaireId == index);

        if (answer == null)
            Quetionnaire1.Add(new QuestionnaireItem() { QuestionnaireId = index, Question = CurrentQuestion, Answer = CurrentAnswer });
        else
            answer.Answer = CurrentAnswer;

        FlagAllRequiredAnswered = AllRequiredAnswered(RequiredAnswers);
    }

    private bool AllRequiredAnswered(List<int> list)
    {
        if (list.Count == 0)
        {
            NavigationChanged.InvokeAsync(true);
            return true;
        }
        else return false;
    }
    [Parameter]
    public EventCallback<bool> NavigationChanged { get; set; }

    #endregion

    //public void OnFocusOut2(Microsoft.AspNetCore.Components.Web.FocusEventArgs args)
    //{
    //    QuestionnaireItem answer = Quetionnaire1.Find(item => item.QuestionnaireId == "2");

    //    if (answer == null)
    //        Quetionnaire1.Add(new QuestionnaireItem() { QuestionnaireId = "2", Question = question2, Answer = Answer2.Value });
    //    else
    //        answer.Answer = Answer2.Value;
    //}
    //public void OnFocusOut3(Microsoft.AspNetCore.Components.Web.FocusEventArgs args)
    //{
    //    QuestionnaireItem answer = Quetionnaire1.Find(item => item.QuestionnaireId == "3");

    //    if (answer == null)
    //        Quetionnaire1.Add(new QuestionnaireItem() { QuestionnaireId = "3", Question = question3, Answer = Answer3.Value });
    //    else
    //        answer.Answer = Answer3.Value;
    //}
    //public void OnFocusOut4(Microsoft.AspNetCore.Components.Web.FocusEventArgs args)
    //{
    //    QuestionnaireItem answer = Quetionnaire1.Find(item => item.QuestionnaireId == "4");

    //    if (answer == null)
    //        Quetionnaire1.Add(new QuestionnaireItem() { QuestionnaireId = "4", Question = question4, Answer = Answer4.Value });
    //    else
    //        answer.Answer = Answer4.Value;
    //}
}
<style>
</style>
