@page "/"

@attribute [Authorize]

@using System.Collections.ObjectModel
@using System.ComponentModel
@using Syncfusion.Blazor.Grids
@using FieldServiceT.Models
@using Newtonsoft.Json.Serialization
@using Newtonsoft.Json


@using FieldServiceT.Helpers
@using Microsoft.IdentityModel.Clients.ActiveDirectory
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.OData
@using Microsoft.OData.Client

@inject NavigationManager navigationManager

<div class="container">
    <h4>Bookable resourses</h4>
    <div class="shadow" style="cursor:pointer">
        <SfGrid @ref="DGrid" DataSource="@ResourceList" AllowPaging="true" AllowPdfExport="true" AllowExcelExport="true" AllowFiltering="true" AllowSorting="true" Toolbar=@Tool>
            <GridPageSettings PageCount="12" PageSizes="true"></GridPageSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" TValue="BookableResource"></GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(BookableResource.BookableResourceId) HeaderText="Id"
                            HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" AutoFit="false" Width="160"></GridColumn>
                <GridColumn Field=@nameof(BookableResource.ResourceType) HeaderText="Type"
                            HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" AutoFit="false" Width="150"></GridColumn>
                <GridColumn Field=@nameof(BookableResource.Name) HeaderText="Name"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" AutoFit="false" Width="260"></GridColumn>
                <GridColumn Field=@nameof(BookableResource.CreatedOn) HeaderText="Created on"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" AutoFit="false" Width="260"></GridColumn>
                <GridColumn Field=@nameof(BookableResource.TimeZone) HeaderText="Time zone"
                            HeaderTextAlign="TextAlign.Left" Format="N2" TextAlign="TextAlign.Center" AutoFit="false" Width="100"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>
@code
{
    #region

    string CurrentToken { get; set; }
    string Error { get; set; }

    string selectedId;
    string url = "https://eg8pfua3iofsrjt3zb.crm.dynamics.com/api/data/v9.0/bookableresources";

    AuthenticationResult token;
    List<BookableResource> ResourceList { get; set; }
    List<string> Tool = (new List<string>() { "Search", "Print" });
    SfGrid<BookableResource> DGrid;

    protected override async Task OnInitializedAsync()
    {
        ResourceList = new List<BookableResource>();
        await GetTokenAsync(null);
        await GetResources(null);
    }

    private async Task GetTokenAsync(MouseEventArgs args)
    {
        try
        {
            token = await TokenService.GetAuthenticationResult();
            CurrentToken = token.AccessToken;
        }
        catch (Exception e)
        {
            CurrentToken = $"ERROR! - {e.Message}";
        }
    }

    private async Task GetResources(MouseEventArgs args)
    {
        {
            using (var client = new System.Net.Http.HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.AccessToken);

                var response = await client.GetAsync(new Uri(url));
                var strjson = await response.Content.ReadAsStringAsync();

                var result = JsonConvert.DeserializeObject<ODataResponse<BookableResource>>(strjson);

                ResourceList = result.Value;
            }
        }
    }

    public void RecordDoubleClickHandler(RecordDoubleClickEventArgs<BookableResource> args)
    {
        var id = args.RowData.BookableResourceId;
        var url = "/BookedResourcePage/" + id + "/" + token.AccessToken;
        navigationManager.NavigateTo(url);
    }

    internal class ODataResponse<T>
    { public List<T> Value { get; set; } }
    #endregion
}
<style>
    .container {
        display: grid;
        grid-template-rows: auto auto auto;
        text-align: left;
        grid-gap: 10px;
        width: 100%;
    }

        .container > div {
            padding: 20px;
            width: auto;
            height: 760px;
            overflow: auto;
            background-color: white;
        }
</style>
