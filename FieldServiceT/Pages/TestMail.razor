@page "/TestMail"
@attribute [Authorize]

@using AspNetMonsters.Blazor.Geolocation
@using System.Collections.ObjectModel
@using System.ComponentModel
@using Syncfusion.Blazor.Grids
@using FieldServiceT.Models
@using Newtonsoft.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@using Microsoft.Extensions.Configuration

@using FieldServiceT.Helpers
@using Microsoft.IdentityModel.Clients.ActiveDirectory
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.OData
@using Microsoft.OData.Client
@using Microsoft.AspNetCore.Authorization
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons

@inject NavigationManager navigationManager
@inject BrowserService browserService
@inject IConfiguration configuration

<div style="background-color:dodgerblue; width:auto; font-size:9px">
    <SfTextBox @ref="MailText"></SfTextBox>
    <SfButton @onclick="OnButtonStartClick" style="margin:2px; color:red">START</SfButton>
    <h6 style="color:white; padding:4px;">Booked Resources</h6>
    <div class="shadow" style="cursor:pointer; width:auto; padding:0px;">
        <SfGrid DataSource="@resourceList" AllowFiltering="true" AllowSorting="true">
            <GridFilterSettings Type="FilterType.CheckBox" Mode="FilterBarMode.Immediate"></GridFilterSettings>
            <GridEvents RowSelected="RowSelectedHandler" TValue="BookedResourceScreen"></GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(BookedResourceScreen.BookableResourceBookingId) HeaderText="Id"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="0"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.Name) HeaderText="NAME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.StartTime) HeaderText="START TIME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Format="D" Width="80"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.EndTime) HeaderText="END TIME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Format="D" Width="60"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOName) HeaderText="WO NAME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="60" HideAtMedia="(min-width: 700px)"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOAddress1) HeaderText="ADDRESS1"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOAddressName) HeaderText="ADDRESS NAME"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="80" HideAtMedia="(min-width: 500px)"></GridColumn>
                <GridColumn Field=@nameof(BookedResourceScreen.WOSummary) HeaderText="SUMMARY"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Left" Width="80" HideAtMedia="(min-width: 500px)"></GridColumn>

            </GridColumns>
        </SfGrid>
    </div>
</div>

@code
{
    // https://docs.microsoft.com/en-us/dynamics365/customer-engagement/web-api/bookableresourcebooking?view=dynamics-ce-odata-9
    // https://docs.microsoft.com/en-us/dynamics365/customer-engagement/web-api/bookableresourcebooking?view=dynamics-ce-odata-9#single-valued-navigation-properties
    // https://42clouds.com/ru-ru/techdocs/interfeys-odata-vozmozhnosti-i-nastroyka.html#link10

    #region Code

    private string CurrentToken { get; set; }
    private string Error { get; set; }
    private string selectedId;

    private string baseUrl; // = "https://eg8pfua3iofsrjt3zb.crm.dynamics.com/api/data/v9.0/";
    private AuthenticationResult token;
    private string userMail;
    private string systemuserId;
    private string bookableResourceId;

    private List<BookedResourceScreen> resourceList { get; set; }

    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    SfTextBox MailText { get; set; }

    public async Task OnButtonStartClick(MouseEventArgs args)
    {
        if (MailText.Value == null) return;

        resourceList = new List<BookedResourceScreen>();

        await GetTokenAsync();

        userMail = MailText.Value;

        systemuserId = await GetSystemUserIdAsync();

        bookableResourceId = await GetBookableResourceAsync();
        if (bookableResourceId == null)
        {
            resourceList = null;
            return;
        }
        resourceList = await GetBookableResourceBookingsAsync();
    }

    protected override void OnInitialized()
    {
        baseUrl = configuration["BaseUrl"];
    }

    private async Task GetTokenAsync()
    {
        try
        {
            //token = await TokenService.GetAuthenticationResultAsync();
            CurrentToken = token.AccessToken;
        }
        catch (Exception e)
        {
            CurrentToken = $"ERROR! - {e.Message}";
        }
    }

    private async Task<string> GetUserMailAsync()
    {
        var authState = await authenticationStateTask;
        return authState.User.Identity.Name;
    }

    private async Task<string> GetSystemUserIdAsync()
    {
        string query = baseUrl + "systemusers?$select=systemuserid,fullname&$filter=internalemailaddress eq '" + userMail + "'";
        using (var client = new System.Net.Http.HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.AccessToken);
            var response = await client.GetAsync(new Uri(query));
            var strjson = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<ODataResponse<SystemUser>>(strjson).Value.First<SystemUser>();
            return result.SystemUserId;
        }
    }

    private async Task<string> GetBookableResourceAsync()
    {
        {
            string query = baseUrl + "bookableresources";
            query += "?$select=bookableresourceid";
            query += "&$filter=_userid_value eq '" + systemuserId + "'";

            using (var client = new System.Net.Http.HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.AccessToken);

                var response = await client.GetAsync(new Uri(query));
                var strjson = await response.Content.ReadAsStringAsync();

                var result = JsonConvert.DeserializeObject<ODataResponse<BookableResource>>(strjson).Value.FirstOrDefault<BookableResource>();

                if (result == null)
                    return null;
                else
                    return result.BookableResourceId;
            }
        }
    }

    private async Task<List<BookedResourceScreen>> GetBookableResourceBookingsAsync()
    {
        string query = baseUrl + "bookableresourcebookings";
        query += "?$filter=_resource_value eq '" + bookableResourceId + "'";
        query += "&$select=name,starttime,endtime";
        query += "&$expand=msdyn_workorder($select = msdyn_name, msdyn_address1,msdyn_addressname,msdyn_workordersummary)";

        using (var client = new System.Net.Http.HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.AccessToken);

            var response = await client.GetAsync(new Uri(query));
            var strjson = await response.Content.ReadAsStringAsync();

            var result = JsonConvert.DeserializeObject<ODataResponse<BookedResource>>(strjson).Value;

            //var list = new List<BookedResourceScreen>();

            var list = result.Select(res => new BookedResourceScreen()
            {
                BookableResourceBookingId = res.BookableResourceBookingId,
                Name = res.Name,
                StartTime = res.StartTime,
                EndTime = res.EndTime,
                WOName = res.WorkOrder == null ? "" : res.WorkOrder.Name,
                WOAddressName = res.WorkOrder == null ? "" : res.WorkOrder.Addressname,
                WOAddress1 = res.WorkOrder == null ? "" : res.WorkOrder.Address1,
                WOSummary = res.WorkOrder == null ? "" : res.WorkOrder.WorkOrderSummary
            }
            );

            var resultList = list.ToList<BookedResourceScreen>();
            return resultList;
        }
    }

    public void RowSelectedHandler(RowSelectEventArgs<BookedResourceScreen> args)
    {
        var id = args.Data.BookableResourceBookingId;
        var url = "/BookedResourcePage/" + id + "/" + token.AccessToken;
        navigationManager.NavigateTo(url);
    }

    internal class ODataResponse<T>
    { public List<T> Value { get; set; } }

    #endregion
}
<style>
    .container {
        display: grid;
    }

        .container > div {
            background-color: brown;
        }
</style>

