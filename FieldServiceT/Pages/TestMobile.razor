@page "/testmobile"

@attribute [Authorize]

@using System.Collections.ObjectModel
@using System.ComponentModel
@using Syncfusion.Blazor.Grids
@using FieldServiceT.Models
@using Newtonsoft.Json.Serialization
@using Newtonsoft.Json
@using System.Text


@using FieldServiceT.Helpers
@using Microsoft.IdentityModel.Clients.ActiveDirectory
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.OData
@using Microsoft.OData.Client

@inject NavigationManager navigationManager
@inject BrowserService browserService

<div style="background-color:dodgerblue; width:auto">
    <h6 style="color:white; padding:4px;">Bookable Resources Booking</h6>
    <div class="shadow" style="cursor:pointer; width:auto; padding:0px;">
        <SfGrid DataSource="@ResourceList" AllowFiltering="true" AllowSorting="true">
            <GridFilterSettings Type="FilterType.FilterBar" Mode="FilterBarMode.Immediate"></GridFilterSettings>
            <GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" TValue="BookableResourceBooking"></GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(BookableResourceBooking.BookableResourceBookingId) HeaderText="Id"
                            HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" Width="0"></GridColumn>
                <GridColumn Field=@nameof(BookableResourceBooking.Name) HeaderText="Name"
                            HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" Width="80"></GridColumn>
                <GridColumn Field=@nameof(BookableResourceBooking.CreatedOn) HeaderText=""
                            HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" Width="80"></GridColumn>
                <GridColumn Field=@nameof(BookableResourceBooking.Duration) HeaderText="Duration"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Center" Width="60"></GridColumn>
                <GridColumn Field=@nameof(BookableResourceBooking.EndTime) HeaderText="End time"
                            HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                <GridColumn Field=@nameof(BookableResourceBooking.ModifiedOn) HeaderText="Modified on"
                            HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Center" Width="80"></GridColumn>
                <GridColumn Field=@nameof(BookableResourceBooking.StatusCode) HeaderText="Status"
                            HeaderTextAlign="TextAlign.Left" Format="N2" TextAlign="TextAlign.Center" Width="50"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>
@code
{
    // https://docs.microsoft.com/en-us/dynamics365/customer-engagement/web-api/bookableresourcebooking?view=dynamics-ce-odata-9

    #region Code

    private string CurrentToken { get; set; }
    private string Error { get; set; }

    private string selectedId;
    private string baseUrl = "https://eg8pfua3iofsrjt3zb.crm.dynamics.com/api/data/v9.0/bookableresourcebookings";
    private Uri queryUri;

    private AuthenticationResult token;
    private List<BookableResourceBooking> ResourceList { get; set; }
    private (string, string) MyTuple;

    protected override async Task OnInitializedAsync()
    {
        ResourceList = new List<BookableResourceBooking>();
        await GetTokenAsync();
        await GetResources();
    }

    private async Task GetTokenAsync()
    {
        try
        {
            token = await TokenService.GetAuthenticationResult();
            CurrentToken = token.AccessToken;
        }
        catch (Exception e)
        {
            CurrentToken = $"ERROR! - {e.Message}";
        }
    }
    private async Task GetResources()
    {
        {
            var qBuilder = new StringBuilder(baseUrl)
                .Append("?$select=")
                .Append("name")
                .Append(",")
                .Append("createdon")
                .Append(",")
                .Append("duration")
                .Append(",")
                .Append("endtime")
                .Append(",")
                .Append("modifiedon")
                .Append(",")
                .Append("statuscode");

            queryUri = new Uri(qBuilder.ToString());

            using (var client = new System.Net.Http.HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.AccessToken);

                var response = await client.GetAsync(queryUri);
                var strjson = await response.Content.ReadAsStringAsync();

                var result = JsonConvert.DeserializeObject<ODataResponse<BookableResourceBooking>>(strjson);

                ResourceList = result.Value;
            }
        }
    }

    public void RecordDoubleClickHandler(RecordDoubleClickEventArgs<BookableResourceBooking> args)
    {
        var id = args.RowData.BookableResourceBookingId;
        var url = "/ResoursesBookingPage/" + id + "/" + token.AccessToken;
        navigationManager.NavigateTo(url);
    }

    internal class ODataResponse<T>
    { public List<T> Value { get; set; } }

    #endregion
}
<style>
    .container {
        display: grid;
    }
        .container > div {
            background-color: brown;
        }
</style>

